import 'package:flutter/material.dart';
import 'dart:convert';
import 'dart:io';
import '../util/loadState.dart';
import '../model/news/Autogenerated.dart';
import '../model/news/Imgextra.dart';
import '../model/news/Inter.dart';
import './newsItem.dart';
import '../model/news/NewsInfo.dart';

class OneTypeNews extends StatefulWidget{
  //final String type;
  String url;
  //OneTypeNews({this.type});
  OneTypeNews({this.url});


  @override
  State<StatefulWidget> createState() {
    // TODO: implement createState
    return new OneTypeNewsState(url: url);
  }
}

class OneTypeNewsState extends State<OneTypeNews> with AutomaticKeepAliveClientMixin{

  //防止重复请求
  bool hasRequested = false;
  Widget savedUI;

  //url
  //String url = "http://api.avatardata.cn/TouTiao/Query?key=267b2271e41745a2ac3a1f0c117a4836&type=";
  String url;
  //final String type;

  LoadState _loadState = LoadState.State_Loading;

  OneTypeNewsState({this.url});

  int newsLength;
  List<Inter> newsList;
  List<Widget> realList;

  Future getData() async {
      print(url);
      var client = new HttpClient();
      var request = await client.getUrl(Uri.parse(url));
      var response = await request.close();
      String jsonStr = await response.transform(Utf8Decoder()).join();
      String realJson = jsonStr.substring(9,jsonStr.length-1);
      print(realJson);
      print(jsonStr.substring(11,27));

      Map<String,dynamic> map;
      try{
        print(realJson.length);
        map = json.decode(realJson);
      }catch(e){
        print(e);
      }

      //print(map['BA10TA81wangning']);
      Autogenerated a = new Autogenerated.fromJson(map,realJson.substring(2,18));
      newsList = a.inters;
      print(newsList.length);
      newsList.forEach((e){
        print(e.title);
      });

      /*Autogenerated a = new Autogenerated.fromJson(json.decode(jsonStr));
      Result result = a.result;
      //print(result.toJson());

      newsList = result.data;
      newsLength = newsList.length;
      newsList.forEach((e){
        //print(e.title);
      });*/
      //print(a.toJson());
  }

  void requestData(){
    getData().then((_){
      setState(() {
        _loadState = LoadState.State_Success;
      });
    }).catchError((_){
      setState(() {
        _loadState = LoadState.State_Error;
      });
    });
  }

  @override
  // ignore: must_call_super
  void initState() {
    super.initState();
    requestData();
    print("initState()!!!");
  }

  @override
  // ignore: must_call_super
  Widget build(BuildContext context) {
    print("buildState!!!");
    // TODO: implement build
    if(_loadState == LoadState.State_Success){
      if(!hasRequested){
        List<Widget> cardList = new List();
        newsList.forEach((e){
          cardList.add(new NewsItemWidget(new NewsInfo(e.title, e.source, e.ptime, e.imgsrc,e.url)));
          /*cardList.add(new ListTile(
            title: new Text(e.title),
            subtitle: new Text(e.ptime),
            trailing: Image.network(e.imgsrc),));*/
        });
        savedUI = new Scaffold(
          body: new Center(
            child: new ListView(
                children: cardList
            ),
          ),
        );
        hasRequested = true;
      }
    }else{
      savedUI = new Scaffold(
        body: LoadStateLayout(
          state: _loadState,
          errorRetry: (){
            setState(() {
              _loadState = LoadState.State_Loading;
            });
            requestData();
          },
        ),
      );
    }
    return savedUI;
  }
  @override
  // TODO: implement wantKeepAlive
  bool get wantKeepAlive => true;
}